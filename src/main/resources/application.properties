### DATASOURCE

# JDBC URL of the database.
spring.datasource.url=jdbc:postgresql://localhost:5432/bitweb
# Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.
spring.datasource.driver-class-name=org.postgresql.Driver
# Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# Login username of the database.
spring.datasource.username=bitweb
spring.datasource.password=ajutine123
#######################
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.datasource.initialization-mode=always
#######################

## Hikari specific settings

# This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection from the pool.
spring.datasource.hikari.connection-timeout=5000
# This property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections.
spring.datasource.hikari.maximum-pool-size=1
# This property controls the default auto-commit behavior of connections returned from the pool.
spring.datasource.hikari.auto-commit=false
# This property represents a user-defined name for the connection pool
# and appears mainly in logging and JMX management consoles to identify pools and pool configurations.
spring.datasource.hikari.pool-name=voting-app-cp

### JPA

# Name of the target database to operate on
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database=postgresql
# Without below HikariCP uses deprecated com.zaxxer.hikari.hibernate.HikariConnectionProvider
# Surprisingly enough below ConnectionProvider is in hibernate-hikaricp dependency and not hibernate-core
# So you need to pull that dependency but, make sure to exclude it's transitive dependencies or you will end up
# with different versions of hibernate-core
spring.jpa.hibernate.connection.provider_class=org.hibernate.hikaricp.internal.HikariCPConnectionProvider
# Spring Boot interprets @Column annotations in its own clever way by default
# But in that case upper case field names are not supported in JPA
spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.EJB3NamingStrategy
# Register OpenEntityManagerInViewInterceptor.
# Binds a JPA EntityManager to the thread for the entire processing of the request.
spring.jpa.open-in-view=false
spring.jpa.show-sql=true

## Additional Hibernate native properties
spring.jpa.properties.hibernate.default_schema=public
# without next line startup time increases dramatically
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false
spring.jpa.properties.hibernate.format_sql=true

## FLYWAY SPECIFIC PROPERTIES
spring.flyway.locations=classpath:db/migration
spring.flyway.url=${spring.datasource.url}
spring.flyway.user=bitweb
spring.flyway.password=ajutine123

### LOGGING PROPERTIES

# Set logging levels
logging.level.com.baeldung.testloglevel=DEBUG
logging.level.root=DEBUG

# ACTIVEMQ
spring.activemq.pool.enabled=true

votingapp.jms.accept-all-voting-events=true

#Sets the maximum number of times a message will be redelivered before it is considered a poisoned pill
#and returned to the broker so it can go to a Dead Letter Queue.
#Set to -1 for unlimited redeliveries.
votingapp.jms.maximumRedeliveries=6
# queue for receiving messages from services
votingapp.jms.consuming-worker-queue=worker
# queue for sending messages to results api
votingapp.jms.send-resultsapi-queue=results-api
# queue for sending messages to results voting api
votingapp.jms.send-votingapi-queue=voting-api
