group = 'com.bitweb'
version = '0.0.1-SNAPSHOT'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${findProperty('version.spring-boot')}"
        classpath "org.slf4j:slf4j-nop:${findProperty('version.slf4j-nop')}"
        classpath 'com.github.ben-manes:gradle-versions-plugin:+'
    }
}

apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: "com.github.ben-manes.versions"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = findProperty('version.java')
targetCompatibility = findProperty('version.java')

apply from: "${rootProject.rootDir}/gradle/checkstyle.gradle"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://plugins.gradle.org/m2/'
    }
}

configurations {
    providedRuntime
    dev
    implementation.exclude module: "spring-boot-starter-tomcat"
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'org.springframework.boot:spring-boot-starter-activemq'
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    annotationProcessor 'org.hibernate:hibernate-jpamodelgen'
    runtimeOnly 'org.postgresql:postgresql'
    implementation "org.messaginghub:pooled-jms:${findProperty("version.pooled-jms")}"
    annotationProcessor "org.projectlombok:lombok:${findProperty("version.lombok")}"
    compileOnly "org.projectlombok:lombok:${findProperty("version.lombok")}"
    implementation "com.google.code.gson:gson:${findProperty("version.gson")}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    api "org.flywaydb:flyway-core:${findProperty('version.flyway')}"
}

test {
    useJUnitPlatform()
}

wrapper {
    gradleVersion = findProperty("version.gradle")
}

ext {
    offlineCompile = new File("$buildDir/output/lib")
}
